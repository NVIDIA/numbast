# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

name: Test Torch and bfloat16

on:
    workflow_call:
      inputs:
        build_type:
          required: true
          type: string
        branch:
          type: string
        date:
          type: string
        sha:
          type: string
        repo:
          type: string
        script:
          type: string
          default: "ci/test_python.sh"
        run_codecov:
          type: boolean
          default: true
        matrix_filter:
          type: string
          default: "."
        container-version:
          type: string
          default: "25.01-py3"
        container-options:
          required: false
          type: string
          default: "-e _NOOP"

defaults:
  run:
    shell: bash

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
    compute-matrix:
        runs-on: ubuntu-latest
        env:
          BUILD_TYPE: ${{ inputs.build_type }}
        outputs:
          MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
        steps:
          - name: Validate Test Type
            run: |
              if [[ "$BUILD_TYPE" != "pull-request" ]] && [[ "$BUILD_TYPE" != "nightly" ]]; then
                  echo "Invalid build type! Must be 'nightly' or 'pull-request'."
                  exit 1
              fi
          - name: Compute Python Test Matrix
            id: compute-matrix
            run: |
              set -eo pipefail

              # please keep the matrices sorted in ascending order by the following:
              #
              #     [ARCH, PY_VER, CUDA_VER, LINUX_VER, GPU, DRIVER]
              #
              export MATRICES="
                pull-request:
                  # amd64
                  - { ARCH: 'amd64', PY_VER: '3.9',  CUDA_VER: '11.8.0', LINUX_VER: 'rockylinux8', GPU: 'v100', DRIVER: 'earliest' }
                  - { ARCH: 'amd64', PY_VER: '3.11', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu22.04', GPU: 'v100', DRIVER: 'latest'   }
                  # arm64
                  - { ARCH: 'arm64', PY_VER: '3.10', CUDA_VER: '12.0.1', LINUX_VER: 'ubuntu20.04', GPU: 'a100', DRIVER: 'latest'   }
                nightly:
                  # amd64
                  - { ARCH: 'amd64', PY_VER: '3.9',  CUDA_VER: '11.4.3', LINUX_VER: 'rockylinux8', GPU: 'v100', DRIVER: 'earliest' }
                  - { ARCH: 'amd64', PY_VER: '3.9',  CUDA_VER: '11.4.3', LINUX_VER: 'ubuntu20.04', GPU: 'v100', DRIVER: 'latest'   }
                  - { ARCH: 'amd64', PY_VER: '3.10', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu22.04', GPU: 'v100', DRIVER: 'latest'   }
                  - { ARCH: 'amd64', PY_VER: '3.10', CUDA_VER: '12.0.1', LINUX_VER: 'rockylinux8', GPU: 'v100', DRIVER: 'latest'   }
                  - { ARCH: 'amd64', PY_VER: '3.11', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu22.04', GPU: 'v100', DRIVER: 'latest'   }
                  # arm64
                  - { ARCH: 'arm64', PY_VER: '3.9',  CUDA_VER: '11.4.3', LINUX_VER: 'ubuntu20.04', GPU: 'a100', DRIVER: 'latest'   }
                  - { ARCH: 'arm64', PY_VER: '3.10', CUDA_VER: '12.0.1', LINUX_VER: 'ubuntu22.04', GPU: 'a100', DRIVER: 'latest'   }
                  - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '11.8.0', LINUX_VER: 'ubuntu22.04', GPU: 'a100', DRIVER: 'latest'   }
                  - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.2.2', LINUX_VER: 'rockylinux8', GPU: 'a100', DRIVER: 'latest'   }
                  - { ARCH: 'arm64', PY_VER: '3.11', CUDA_VER: '12.5.1', LINUX_VER: 'ubuntu22.04', GPU: 'a100', DRIVER: 'latest'   }
              "

              TEST_MATRIX=$(yq -n 'env(MATRICES) | .[strenv(BUILD_TYPE)]')
              export TEST_MATRIX

              MATRIX="$(
                yq -n -o json 'env(TEST_MATRIX)' | \
                jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
              )"

              echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
    tests:
        needs: compute-matrix
        strategy:
          fail-fast: false
          matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
        runs-on: "linux-${{ matrix.ARCH }}-gpu-${{ matrix.GPU }}-${{ matrix.DRIVER }}-1"
        container: # GPU jobs must run in a container
            # Numbast depends on conda installed CTK, thus system CTK should not matter. Similarly for python version.
            image: nvcr.io/nvidia/pytorch:${{ inputs.container-version }}
            options: ${{ inputs.container-options }}
            env:
                NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }} # GPU jobs must set this container env variable
        env:
            RAPIDS_COVERAGE_DIR: ${{ github.workspace }}/coverage-results
            RAPIDS_TESTS_DIR: ${{ github.workspace }}/test-results
            RAPIDS_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
        steps:
          - uses: actions/checkout@v4
            with:
              repository: ${{ inputs.repo }}
              ref: ${{ inputs.sha }}
              fetch-depth: 0
          - name: Setup Environment, Build and Test Torch
            run: ${{ inputs.script }}
          - name: Generate test report
            uses: test-summary/action@v2.3
            with:
              paths: "${{ env.RAPIDS_TESTS_DIR }}/*.xml"
            if: always()
