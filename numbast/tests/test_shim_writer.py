from numbast.shim_writer import FileShimWriter, MemoryShimWriter

from numba import cuda, types

import pytest

source = """
extern "C" __device__
int add(int &res, int a, int b) { res = a + b; return 0; }
"""

ptx = """
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-33961263
// Cuda compilation tools, release 12.4, V12.4.99
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_{arch}
.address_size 64

	// .globl	mymul

.visible .func  (.param .b32 func_retval0) mymul(
	.param .b32 _Z5mymulii_param_0,
	.param .b32 _Z5mymulii_param_1
)
{{
	.reg .b32 	%r<4>;


	ld.param.u32 	%r1, [_Z5mymulii_param_0];
	ld.param.u32 	%r2, [_Z5mymulii_param_1];
	mul.lo.s32 	%r3, %r2, %r1;
	st.param.b32 	[func_retval0+0], %r3;
	ret;

}}
"""

ptx_wrapper = """
extern "C" __device__ int mymul(int a, int b);

extern "C" __device__
int mul(int &res, int a, int b) { res = mymul(a, b); return 0; }
"""


@pytest.fixture
def cc():
    major, minor = cuda.get_current_device().compute_capability
    return f"{major}{minor}"


def link_to_add_kernel(shim_writer):
    add = cuda.declare_device(
        "add",
        types.int32(types.int32, types.int32),
        link=[*shim_writer.links()],
    )

    @cuda.jit
    def k(arr):
        arr[0] = add(1, 2)

    arr = cuda.device_array(1, dtype="i4")
    k[1, 1](arr)
    assert arr[0] == 3


def link_to_mul_kernel(shim_writer):
    mul = cuda.declare_device(
        "mul",
        types.int32(types.int32, types.int32),
        link=[*shim_writer.links()],
    )

    @cuda.jit
    def k(arr):
        arr[0] = mul(1, 2)

    arr = cuda.device_array(1, dtype="i4")
    k[1, 1](arr)
    assert arr[0] == 2


def test_file_shim_writer_add_source():
    shim_writer = FileShimWriter()
    shim_writer.write_to_shim(source, "add_int_int")
    link_to_add_kernel(shim_writer)


def test_ptx_shim_writer_add_source(cc):
    shim_writer = FileShimWriter()
    shim_writer.write_to_shim(ptx_wrapper, "mul_int_int")
    shim_writer.write_to_ptx_shim(ptx.format(arch=cc), "mymulii")
    link_to_mul_kernel(shim_writer)


def test_memory_shim_writer_add_source():
    shim_writer = MemoryShimWriter()
    shim_writer.write_to_shim(source, "add_int_int")
    link_to_add_kernel(shim_writer)


def test_memory_shim_writer_add_ptx(cc):
    shim_writer = MemoryShimWriter()
    shim_writer.write_to_shim(ptx_wrapper, "mul_int_int")
    shim_writer.write_to_ptx_shim(ptx.format(arch=cc), "mymulii")
    link_to_mul_kernel(shim_writer)
